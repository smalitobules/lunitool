// build.rs
// Removed unused imports: std::fs, std::env, std::path::Path

use std::env;
use std::fs;
use std::io::Write;
use std::path::Path;

fn main() {
    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("embedded_locales.rs");
    let mut f = fs::File::create(&dest_path).unwrap();

    let manifest_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let locales_src_dir = Path::new(&manifest_dir).join("src").join("locales");

    // Rerun build script if anything in src/locales changes
    println!("cargo:rerun-if-changed={}", locales_src_dir.display());

    let mut locale_data_map_population = String::new();

    if locales_src_dir.exists() && locales_src_dir.is_dir() {
        for entry in fs::read_dir(locales_src_dir).unwrap() {
            let entry = entry.unwrap();
            let path = entry.path();
            if path.is_file() && path.extension().map_or(false, |ext| ext == "ftl") {
                if let Some(stem) = path.file_stem().and_then(|s| s.to_str()) {
                    // stem is the language code, e.g., "en", "de"
                    
                    // Path for include_str! should be absolute or relative to CARGO_MANIFEST_DIR for robustness
                    // as include_str! in the generated file (in OUT_DIR) needs a clear reference.
                    let absolute_ftl_path = Path::new(&manifest_dir).join("src").join("locales").join(path.file_name().unwrap());

                    locale_data_map_population.push_str(&format!(
                        "    locales.insert(\"{}\".to_string(), include_str!(r\"{}\"));\n",
                        stem,
                        absolute_ftl_path.to_str().unwrap().replace('\\', "\\\\") // Escape backslashes for Windows paths
                    ));
                }
            }
        }
    }

    // Write the function that returns the HashMap
    write!(f, r#"
// This file is automatically generated by build.rs
// Do not edit manually.

fn get_embedded_ftl_strings() -> ::std::collections::HashMap<String, &'static str> {{
    let mut locales = ::std::collections::HashMap::new();
{}
    locales
}}
"#, locale_data_map_population).unwrap();
}